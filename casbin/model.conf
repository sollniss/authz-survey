# Request definition: user, action, resource
[request_definition]
r = sub, act, obj

# Policy definition with effect (allow/deny)
[policy_definition]
p = sub, act, obj, eft

# Role definition relations
[role_definition]
# user-company relation: g(user, company)
g = _, _
# company-product relation: g2(product, company)
g2 = _, _
# user-product relation: g3(user, product, access_type)
g3 = _, _, _
# action hierarchy relation: g4(action_child, action_parent)
g4 = _, _

# Policy combining algorithm: deny overrides allow
[policy_effect]
e = some(where (p.eft == allow)) && !some(where (p.eft == deny))

# Matchers for different access scenarios
[matchers]
# Basic matcher for all policies
# Case 1: Direct user-to-product permission
# Case 2: User belongs to company and has access to company's product
# Case 3: User has specific access to a product
# Case 4: User belongs to company and has access to all products
# Case 5: User belongs to company and company owns the product
m = ( \
    (r.sub == p.sub && g4(r.act, p.act) && r.obj == p.obj) || \
    (r.sub == p.sub && g4(r.act, p.act) && g2(r.obj, p.obj)) || \
    (g3(r.sub, r.obj, r.act)) || \
    (g(r.sub, p.sub) && g4(r.act, p.act) && r.obj == p.obj) || \
    (g(r.sub, p.sub) && g2(r.obj, p.sub) && g4(r.act, p.act)) \
)